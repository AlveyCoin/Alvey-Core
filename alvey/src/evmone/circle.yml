version: 2.1

executors:
  linux-gcc-latest:
    docker:
      - image: ethereum/cpp-build-env:16-gcc-10
  linux-gcc-7:
    docker:
      - image: ethereum/cpp-build-env:12-gcc-7
  linux-clang-latest:
    docker:
      - image: ethereum/cpp-build-env:16-clang-11
  macos:
    macos:
      xcode: 11.1.0

commands:
  build_silkworm:
    parameters:
      branch:
        type: string
        default: master
      commit:
        type: string
    steps:
      - restore_cache:
          name: "Restore Silkworm cache (<<parameters.branch>>-<<parameters.commit>>)"
          key: &silkworm-cache-key silkworm-<<parameters.branch>>-<<parameters.commit>>
      - run:
          name: "Check Silkworm cache"
          command: |
            if [ -f ~/silkworm/consensus ]; then
              echo 'Cached Silkworm binary available - skip build.'
            else
              echo 'export SILKWORM_BUILD=true' >> $BASH_ENV
            fi
      - run:
          name: "Install GMP-dev"
          command: |
            [ "$SILKWORM_BUILD" = true ] || exit 0
            sudo apt-get -q update && sudo apt-get -qy install --no-install-recommends libgmp-dev
      - run:
          name: "Checkout Silkworm"
          working_directory: ~/silkworm/src
          command: |
            [ "$SILKWORM_BUILD" = true ] || exit 0
            git clone --no-checkout --single-branch https://github.com/torquem-ch/silkworm.git . --branch <<parameters.branch>>
            git checkout <<parameters.commit>>
            git submodule update --init --recursive --depth=1 --progress
      - run:
          name: "Configure Silkworm"
          working_directory: ~/silkworm
          command: |
            [ "$SILKWORM_BUILD" = true ] || exit 0
            cmake -S src -B build -DCMAKE_BUILD_TYPE=Release -DCMAKE_RUNTIME_OUTPUT_DIRECTORY=$(pwd)
      - run:
          name: "Build Silkworm cmd/consensus"
          working_directory: ~/silkworm
          command: |
            [ "$SILKWORM_BUILD" = true ] || exit 0
            cmake --build build --parallel --target consensus
      - save_cache:
          name: "Save Silkworm cache"
          key: *silkworm-cache-key
          paths:
            - ~/silkworm/consensus

  download_consensus_tests:
    parameters:
      rev:
        type: string
    steps:
      - run:
          name: "Download consensus tests: <<parameters.rev>>"
          working_directory: ~/tests
          command: curl -L https://github.com/ethereum/tests/archive/<<parameters.rev>>.tar.gz | tar -xz --strip=1

  build:
    description: "Build"
    steps:
      - checkout
      - run:
          name: "Update submodules"
          command: git submodule update --init --recursive
      - run:
          name: "Environment"
          command: |
            CC=${CC:-cc}
            CXX=${CXX:-cpp}
            echo CC: $CC
            echo CXX: $CXX
            $CC --version
            $CXX --version
            cmake --version

            # Create the toolchain.info file for cache key.
            echo $TOOLCHAIN >> toolchain.info
            $CXX --version >> toolchain.info
      - restore_cache:
          name: "Restore Hunter cache"
          key: &hunter-cache-key hunter-{{arch}}-{{checksum "toolchain.info"}}-{{checksum "cmake/Hunter/init.cmake"}}
      - run:
          name: "Configure"
          working_directory: ~/build
          command: |
            if [ "$TOOLCHAIN" ]; then
              export toolchain_option="-DTOOLCHAIN=$TOOLCHAIN"
            fi
            cmake ../project $toolchain_option -DCMAKE_INSTALL_PREFIX=~/install -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DEVMONE_TESTING=ON $CMAKE_OPTIONS
      - save_cache:
          name: "Save Hunter cache"
          key: *hunter-cache-key
          paths:
            - ~/.hunter/_Base/Cache
      - run:
          name: "Build"
          command: cmake --build ~/build -- -j4
      - run:
          name: "Install"
          command: cmake --build ~/build --target install

  test:
    description: "Test"
    steps:
    - run:
        name: "Test"
        working_directory: ~/build
        command: ctest -R ${TESTS_FILTER:-'.*'} -j4 --schedule-random --output-on-failure

  collect_coverage_gcc:
    description: "Collect coverage data (GCC)"
    steps:
      - run:
          name: "Collect coverage data (GCC)"
          working_directory: ~/build
          command: |
            lcov --capture --directory . --output-file coverage.lcov --exclude='/usr/*' --exclude="$HOME/.hunter/*" --exclude="$PWD/_deps/*"
            lcov --zerocounters --directory .
            rm -rf coverage
            genhtml coverage.lcov --output-directory coverage --title $CIRCLE_PROJECT_REPONAME

  upload_coverage:
    description: "Upload coverage data"
    parameters:
      flags:
        type: string
    steps:
      - run:
          name: "Upgrade codecov"
          command: sudo pip3 install --upgrade --quiet --no-cache-dir codecov
      - run:
          name: "Upload to Codecov"
          command: |
            # Convert to relative paths
            sed -i 's|$(pwd)/||' ~/build/coverage.lcov
            counter=1
            until codecov --flags <<parameters.flags>> --required --file ~/build/coverage.lcov -X gcov || [ $counter = 5 ]; do
              counter=$((counter+1))
              sleep 1
              echo "Try #$counter..."
            done

  package:
    description: "Make package"
    steps:
      - run:
          name: "Build Package"
          working_directory: ~/package
          command: cmake --build ~/build --target package && mv ~/build/evmone*.tar.gz* .
      - store_artifacts:
          path: ~/package
          destination: package
      - persist_to_workspace:
          root: ~/package
          paths:
            - evmone-*

  unpack_package:
    steps:
      - attach_workspace:
          at: ~/package
      - run:
          name: "Unpack evmone"
          working_directory: ~/package
          command: tar xz < evmone*.tar.gz

jobs:

  lint:
    docker:
    - image: ethereum/cpp-build-env:14-lint
    steps:
    - checkout
    - run:
        name: "Check code format"
        command: |
          clang-format --version
          find include lib test -name '*.hpp' -o -name '*.cpp' -o -name '*.h' -o -name '*.c' | xargs clang-format -i
          git diff --color --exit-code
    - run:
        name: "Check spelling"
        command: |
          codespell --quiet-level=4

  release-linux:
    executor: linux-gcc-latest
    environment:
      BUILD_TYPE: Release
    steps:
      - build
      - test
      - package

  release-macos:
    executor: macos
    environment:
      BUILD_TYPE: Release
    steps:
      - run:
          name: "Install System Dependencies"
          command: HOMEBREW_NO_AUTO_UPDATE=1 brew install cmake
      - build
      - test
      - package

  deploy:
    docker:
      - image: circleci/golang
    steps:
      - run:
          name: "Install GHR"
          command: |
            GO111MODULE=on go get github.com/tcnksm/ghr@v0.12.1
      - attach_workspace:
          at: ~/package
      - run:
          name: "Create GitHub release"
          command: |
            ls -l ~/package
            prerelease_flag=$([[ $CIRCLE_TAG =~ ^v[0-9\.]+$ ]] || echo '-prerelease')
            name="$CIRCLE_PROJECT_REPONAME ${CIRCLE_TAG:1}"
            echo $name
            ghr -u $CIRCLE_PROJECT_USERNAME -r $CIRCLE_PROJECT_REPONAME -n "$name" $prerelease_flag $CIRCLE_TAG ~/package

  consensus-tests:
    executor: linux-gcc-latest
    environment:
      BUILD_TYPE: Coverage
      CMAKE_OPTIONS: -DEVMONE_TESTING=OFF
    steps:
      - build
      - build_silkworm:
          commit: 82344ce1277642ca549e0603d70f24050073e202
      - download_consensus_tests:
          rev: 9.0.2
      - run:
          name: "Silkworm-driven consensus tests (Advanced)"
          working_directory: ~/build
          command: ~/silkworm/consensus --evm lib/libevmone.so,O=2 --tests ~/tests
      - run:
          name: "Silkworm-driven consensus tests (Baseline)"
          working_directory: ~/build
          command: ~/silkworm/consensus --evm lib/libevmone.so,O=0 --tests ~/tests
      - collect_coverage_gcc
      - upload_coverage:
          flags: consensus

  gcc-min:
    executor: linux-gcc-7
    steps:
      - build
      - test

  gcc-latest-coverage:
    executor: linux-gcc-latest
    environment:
      BUILD_TYPE: Coverage
      TESTS_FILTER: unittests|integration
    steps:
      - build
      - test
      - collect_coverage_gcc
      - upload_coverage:
          flags: unittests

  gcc-latest-memcheck:
    executor: linux-gcc-latest
    environment:
      BUILD_TYPE: Debug
      CMAKE_OPTIONS: -DCMAKE_CXX_FLAGS=-O1
    steps:
      - build
      - test
      - run:
          name: "Install valgrind"
          command: sudo apt-get -q update && sudo apt-get -qy install --no-install-recommends valgrind
      - run:
          name: "memcheck"
          working_directory: ~/build
          command: valgrind --vgdb=no --error-exitcode=99 bin/evmone-unittests

  gcc-32bit:
    docker:
      - image: ethereum/cpp-build-env:15-gcc-10-multilib
    environment:
      TOOLCHAIN: cxx17-32bit
    steps:
      - build
      - test

  clang-latest-ubsan:
    executor: linux-clang-latest
    environment:
      CMAKE_OPTIONS: -DSANITIZE=undefined,implicit-conversion,nullability
      UBSAN_OPTIONS: halt_on_error=1
    steps:
      - build
      - test

  clang-latest-coverage:
    executor: linux-clang-latest
    environment:
      BUILD_TYPE: Coverage
      TESTS_FILTER: unittests|integration
    steps:
      - build
      - run:
          name: "Run unit tests"
          working_directory: ~/build
          command: |
            bin/evmone-unittests
      - run:
          name: "Coverage report"
          working_directory: ~/build
          command: |
            mkdir ~/coverage
            llvm-profdata merge *.profraw -o evmone.profdata
            llvm-cov show lib/libevmone.so bin/evmone-unittests -Xdemangler llvm-cxxfilt -instr-profile=evmone.profdata -ignore-filename-regex=include/evmc -region-coverage-lt=100 -format=html > ~/coverage/missing.html
            llvm-cov show lib/libevmone.so bin/evmone-unittests -Xdemangler llvm-cxxfilt -instr-profile=evmone.profdata -ignore-filename-regex=include/evmc -format=html > ~/coverage/full.html

            llvm-cov report lib/libevmone.so bin/evmone-unittests -Xdemangler llvm-cxxfilt -instr-profile=evmone.profdata -ignore-filename-regex=include/evmc > ~/coverage/report.txt
            llvm-cov report lib/libevmone.so bin/evmone-unittests -Xdemangler llvm-cxxfilt -instr-profile=evmone.profdata -ignore-filename-regex=include/evmc -use-color
      - store_artifacts:
          path: ~/coverage
          destination: coverage



  macos-asan:
    executor: macos
    environment:
      BUILD_TYPE: RelWithDebInfo
      CMAKE_OPTIONS: -DSANITIZE=address
      TESTS_FILTER: unittests
    steps:
      - run:
          name: "Install System Dependencies"
          command: HOMEBREW_NO_AUTO_UPDATE=1 brew install cmake
      - build
      - test

workflows:
  version: 2
  evmone:
    jobs:
      - lint
      - release-linux:
          filters:
            tags:
              only: /.*/
      - release-macos:
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /.*/
      - deploy:
          requires:
            - release-linux
            - release-macos
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /^v[0-9].*/
      - consensus-tests
      - gcc-min
      - gcc-latest-coverage
      - gcc-latest-memcheck
      - clang-latest-ubsan
      - clang-latest-coverage
      - macos-asan
      - gcc-32bit
